@page "/randomcompetitors"
@inject ICompetitiorsService _competitorsService

<PageTitle>Random Competitors</PageTitle>

<h1>Random Competitors</h1>
<div class="container-md">
    <p class="text-body">Get a random competitor from all competitors with minimum one valid result. </p>
</div>

@if (Competitions == null)
{
    <div class="container-md">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="container-md">
        <select class="form-control selectpicker" @onchange="OnCompIsSelected" disabled="@(!string.IsNullOrEmpty(Competitor))" >
            <option>--select--</option>
            @foreach (var item in Competitions.OrderBy(t => t.StartDate))
            {
                <option value="@item.Id">@item.Name</option>
            }
            </select>
    </div>
}

@if (Competitors == null )
{
    <div class="container-md">
        <p><em>Select a competition</em></p>
    </div>
}
else
{
    <div class="container-md">
        <button class="btn btn-primary" disabled="@(!Competitors.Any())" @onclick="GetRandomCompetitor">Get competitor</button>
    </div>

    <div class="container-md">
        <h2>@Competitor</h2>
    </div>
}

@code {
    private List<Competition>? Competitions;
    private List<string>? Competitors;
    private string Competitor = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Competitions = await _competitorsService.GetCompetitions();
    }

    protected async Task OnCompIsSelected(ChangeEventArgs e)
    {
        if(e.Value != null)
            Competitors = await _competitorsService.GetCompetititors(Convert.ToInt32(e.Value));    
    }

    protected void GetRandomCompetitor()
    {
        if (Competitors != null)
        {
            var next = new Random().Next(0, Competitors.Count);
            Competitor = Competitors.ElementAt(next);
            Competitors.RemoveAt(next);
        }
    }
}
